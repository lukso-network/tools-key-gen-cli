{
  "partial_deposit": {
      "arg_partial_deposit" :{
          "help": "Generate a partial deposit with any amount at least 1 ether which will be signed by the provided validator keystore. This will append to the balance of the provided validator or initiate the creation of one."
      },
      "arg_partial_deposit_chain": {
          "help": "The name of the Ethereum PoS chain your validator is running on. \"mainnet\" is the default.",
          "prompt": "Please choose the (mainnet or testnet) network/chain name"
      },
      "arg_partial_deposit_amount": {
          "help": "The amount to deposit to this validator in ether denomination. Must be at least 1 ether and can not have greater precision than 1 gwei. Default is 32 ether.",
          "prompt": "Please enter the amount you wish to deposit to this validator. Must be at least {min_deposit} and can not have greater precision than 1 gwei. {activation_amount} is required to activate a new validator"
      },
      "arg_partial_deposit_keystore": {
          "help": "The keystore file associated with the validator you wish to sign with and deposit to.",
          "prompt": "Please enter the location of your keystore file."
      },
      "arg_partial_deposit_keystore_password": {
          "help": "The password that is used to encrypt the provided keystore. Note: It's not your mnemonic password. (It is recommended not to use this argument, and wait for the CLI to ask you for your password as otherwise it will appear in your shell history.)",
          "prompt": "Enter the password that is used to encrypt the provided keystore.",
          "mismatch": "Error: The provided keystore password was unable to decrypt this keystore file. Make sure you have the correct password and try again."
      },
      "arg_partial_deposit_output_folder": {
          "help": "The folder path where the partial deposit will be saved to. Pointing to `./partial_deposits` by default."
      },
      "arg_withdrawal_address": {
          "help": "The withdrawal address of the validator. If you wish to create a validator with 0x00 credentials use the new-mnemonic or existing-mnemonic command.",
          "confirm": "Repeat the withdrawal address for confirmation.",
          "prompt": "Please enter the withdrawal address. If you wish to create a validator with 0x00 credentials use the new-mnemonic or existing-mnemonic command.",
          "mismatch": "Error: the two entered addresses do not match. Please type again."
      },
      "arg_compounding": {
          "help": "Generates compounding validators with 0x02 withdrawal credentials for a 2048 ETH maximum effective balance or generate regular validators with 0x01 withdrawal credentials for a 32 ETH maximum effective balance. This feature is only supported on networks that have undergone the Pectra fork.",
          "prompt": "Please enter yes if you want to generate compounding validators with 0x02 withdrawal credentials for a 2048 ETH maximum effective balance. Compounding validators and 0x02 withdrawal credentials are only supported on networks that have undergone the Pectra fork. Please type no or nothing if you want regular validators with 0x01 withdrawal credentials for a 32 ETH maximum effective balance."
      },
      "arg_devnet_chain_setting": {
          "help": "[DEVNET ONLY] Set specific GENESIS_FORK_VERSION value. This should be a JSON string containing an object with the following keys: network_name, genesis_fork_version, exit_fork_version, genesis_validator_root, multiplier, min_activation_amount and min_deposit_amount. It should be similar to what you can find in settings.py. This will override any selected chain."
      },
      "msg_partial_deposit_creation": "\nCreating your partial deposit...",
      "msg_verify_partial_deposit": "\nVerifying your partial deposit...",
      "err_verify_partial_deposit": "\nThere was a problem verifying your partial deposit.\nPlease try again",
      "msg_creation_success": "\nSuccess!\nYour partial deposit file can be found at: ",
      "msg_pause": "\n\nPress any key."
  }
}
