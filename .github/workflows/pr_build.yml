name: ci-build
run-name: ${{ github.actor }} is building binaries, building the docker image and drafting a release

on:
  pull_request:
    branches:
      - main

jobs:
  build-binaries:
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
      attestations: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm, macos-13, macos-latest, windows-latest, windows-11-arm]
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install rustup (Windows 11 ARM64)
        if: matrix.os == 'windows-11-arm'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://static.rust-lang.org/rustup/dist/aarch64-pc-windows-msvc/rustup-init.exe" -OutFile rustup-init.exe
          .\rustup-init.exe --default-toolchain none -y
          "$env:USERPROFILE\.cargo\bin" | Out-File -Append -Encoding ascii $env:GITHUB_PATH
          "CARGO_HOME=$env:USERPROFILE\.cargo" | Out-File -Append -Encoding ascii $env:GITHUB_ENV
      - name: Install Rust (Windows 11 ARM64)
        if: matrix.os == 'windows-11-arm'
        shell: pwsh
        run: |
          rustup install stable
          rustup target add aarch64-pc-windows-msvc
      - name: Set up variables (Linux & macOS)
        if: ${{ startsWith(matrix.os, 'ubuntu-') || startsWith(matrix.os, 'macos-') }}
        env:
          MATRIX_OS: '${{ matrix.os }}'
        run: |
          echo "PYTHONHASHSEED=42" >> "$GITHUB_ENV"
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c -7)
          echo "SHORT_SHA=${SHORT_SHA}" >> "$GITHUB_ENV"
          if [[ $MATRIX_OS == ubuntu-* ]] ;
          then
            BUILD_SYSTEM=linux
            BUILD_CONFIGS_PATH=./build_configs/linux
          fi
          if [[ $MATRIX_OS == macos-* ]] ;
          then
            BUILD_SYSTEM=darwin
            BUILD_CONFIGS_PATH=./build_configs/macos
            brew install coreutils
          fi
          BUILD_ARCHITECTURE=amd64
          if [[ $MATRIX_OS == *arm* ]] || [[ $MATRIX_OS == macos-latest ]] ;
          then
            BUILD_ARCHITECTURE=arm64
          fi
          BUILD_FILE_NAME=ethstaker_deposit-cli-${SHORT_SHA}-${BUILD_SYSTEM}-${BUILD_ARCHITECTURE}
          mkdir "${BUILD_FILE_NAME}"
          echo "BUILD_FILE_NAME=${BUILD_FILE_NAME}" >> "$GITHUB_ENV"
          echo "BUILD_CONFIGS_PATH=${BUILD_CONFIGS_PATH}" >> "$GITHUB_ENV"
      - name: Setup variables (Windows)
        if: ${{ startsWith(matrix.os, 'windows-') }}
        env:
          MATRIX_OS: '${{ matrix.os }}'
        run: |
          echo "PYTHONHASHSEED=42" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $env:SHORT_SHA = "${{ github.sha }}".Substring(0, 7)
          echo ("SHORT_SHA=" + $env:SHORT_SHA) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          if ($env:MATRIX_OS.Contains("arm")) {
            $env:BUILD_ARCHITECTURE = "arm64"
          }
          else {
            $env:BUILD_ARCHITECTURE = "amd64"
          }
          $env:BUILD_FILE_NAME = ("ethstaker_deposit-cli-" + $env:SHORT_SHA + "-windows-" + $env:BUILD_ARCHITECTURE)
          echo ("BUILD_FILE_NAME=" + $env:BUILD_FILE_NAME) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          mkdir $env:BUILD_FILE_NAME
          $env:BUILD_FILE_NAME_PATH = (".\" + $env:BUILD_FILE_NAME)
          echo ("BUILD_FILE_NAME_PATH=" + $env:BUILD_FILE_NAME_PATH) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Build on Linux & macOS
        if: ${{ startsWith(matrix.os, 'ubuntu-') || startsWith(matrix.os, 'macos-') }}
        run: |
          python -m pip install --upgrade pip
          pip install -r "${BUILD_CONFIGS_PATH}"/requirements.txt -r requirements.txt
          pyinstaller --distpath ./"${BUILD_FILE_NAME}" "${BUILD_CONFIGS_PATH}"/build.spec
          export ARCHIVE_FILE_NAME="${BUILD_FILE_NAME}".tar.gz
          echo "ARCHIVE_FILE_NAME=${ARCHIVE_FILE_NAME}" >> "$GITHUB_ENV"
          tar -zcvf "${ARCHIVE_FILE_NAME}" ./"${BUILD_FILE_NAME}"
          mkdir -p output/artifacts
          cp "${ARCHIVE_FILE_NAME}" output/artifacts
          sha256sum "${ARCHIVE_FILE_NAME}" | head -c 64 > output/artifacts/"${ARCHIVE_FILE_NAME}".sha256
      - name: Build on Windows
        if: ${{ startsWith(matrix.os, 'windows-') }}
        run: |
          python -m pip install --upgrade pip
          pip install -r build_configs/windows/requirements.txt -r requirements.txt
          pyinstaller --distpath $env:BUILD_FILE_NAME .\build_configs\windows\build.spec
          $env:ZIP_FILE_NAME = ($env:BUILD_FILE_NAME + ".zip")
          echo ("ZIP_FILE_NAME=" + $env:ZIP_FILE_NAME) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Compress-Archive -Path $env:BUILD_FILE_NAME_PATH -DestinationPath $env:ZIP_FILE_NAME
          mkdir output\artifacts
          copy $env:ZIP_FILE_NAME output\artifacts
          $env:CHECKSUM_FILE_NAME_PATH = ("output\artifacts\" + $env:ZIP_FILE_NAME + ".sha256")
          certUtil -hashfile $env:ZIP_FILE_NAME SHA256 | findstr /i /v "SHA256" | findstr /i /v "CertUtil" > $env:CHECKSUM_FILE_NAME_PATH
      - name: Generate artifacts attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: output/artifacts/*
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ github.sha }}-${{ github.run_id }}
          path: output/artifacts

